plugins {
    id 'com.android.library'
    id 'maven-publish'
}

//def githubProperties = new Properties()
//githubProperties.load(new FileInputStream(rootProject.file("github.properties"))) //Set env variable GPR_USER & GPR_API_KEY if not adding a properties file
def getGroupPageId = { ->
    return "com.kekxv" // Replace with version Name
}
def getVersionName = { ->
    return "0.2.14" // Replace with version Name
}
def getArtificatId = { ->
    return "autowired" // Replace with library name ID
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "$getVersionName()"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    sourceSets {
        main {
            jniLibs.srcDirs = ["lib"]
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}
//https://stackoverflow.com/questions/26874498/publish-an-android-library-to-maven-with-aar-and-source-jar

//afterEvaluate {
publishing {
    publications {
        // Creates a Maven publication called "release".
        release(MavenPublication) {
            // Applies the component for the release build variant.
//                from components.release

            groupId getGroupPageId()
            artifactId getArtificatId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtificatId()}-release.aar")

            artifact(sourceJar)
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "implementation") }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "implementation") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }

    repositories {
//        maven {
//            url "$buildDir/repo"
//        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/kekxv/JavaRepo/")
            credentials {
                username = System.getenv('ACCESS_USER') ?: project.properties['GITHUB_USER']
                password = System.getenv('ACCESS_PERSONAL_ACCESS_TOKEN') ?: project.properties['GITHUB_PERSONAL_ACCESS_TOKEN']
            }
        }
    }
}

publish.dependsOn(build)


dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    api 'com.google.code.gson:gson:2.11.0'

    // https://mvnrepository.com/artifact/com.alibaba/fastjson
    implementation group: 'com.alibaba', name: 'fastjson', version: '1.2.83'
    // implementation group: 'com.alibaba', name: 'fastjson', version: '2.+'
    // https://github.com/NanoHttpd/nanohttpd
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
}
